// Mocks generated by Mockito 5.4.4 from annotations
// in forms_cubit/test/mock/validation.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:forms_cubit/field/model/field_exception.dart' as _i3;
import 'package:forms_cubit/field/validation/validation.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [FormsFieldValidation].
///
/// See the documentation for Mockito's code generation for more information.
class MockFormsFieldValidation<T> extends _i1.Mock
    implements _i2.FormsFieldValidation<T> {
  @override
  List<_i2.FormsFieldValidator<T>> get validatorList => (super.noSuchMethod(
        Invocation.getter(#validatorList),
        returnValue: <_i2.FormsFieldValidator<T>>[],
        returnValueForMissingStub: <_i2.FormsFieldValidator<T>>[],
      ) as List<_i2.FormsFieldValidator<T>>);

  @override
  bool get isValid => (super.noSuchMethod(
        Invocation.getter(#isValid),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  Iterable<_i3.FormsFieldException> get errorList => (super.noSuchMethod(
        Invocation.getter(#errorList),
        returnValue: <_i3.FormsFieldException>[],
        returnValueForMissingStub: <_i3.FormsFieldException>[],
      ) as Iterable<_i3.FormsFieldException>);

  @override
  void addValidator(_i2.FormsFieldValidator<T>? validator) =>
      super.noSuchMethod(
        Invocation.method(
          #addValidator,
          [validator],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addValidatorList(Iterable<_i2.FormsFieldValidator<T>>? validatorList) =>
      super.noSuchMethod(
        Invocation.method(
          #addValidatorList,
          [validatorList],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void insertValidator(
    int? index,
    _i2.FormsFieldValidator<T>? validator,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #insertValidator,
          [
            index,
            validator,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void insertValidatorList(
    int? index,
    Iterable<_i2.FormsFieldValidator<T>>? validatorList,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #insertValidatorList,
          [
            index,
            validatorList,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void updateValidatorList(
          Iterable<_i2.FormsFieldValidator<T>>? validatorList) =>
      super.noSuchMethod(
        Invocation.method(
          #updateValidatorList,
          [validatorList],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeValidator(_i2.FormsFieldValidator<T>? validator) =>
      super.noSuchMethod(
        Invocation.method(
          #removeValidator,
          [validator],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.FutureOr<void> validate(
    T? value, {
    _i2.FormsFieldValidatorTriggerType? triggerType,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #validate,
          [value],
          {#triggerType: triggerType},
        ),
        returnValueForMissingStub: null,
      ) as _i4.FutureOr<void>);

  @override
  void reset() => super.noSuchMethod(
        Invocation.method(
          #reset,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
